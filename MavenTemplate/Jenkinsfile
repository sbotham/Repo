pipeline {
    agent any
    
    
    
    tools {
        maven 'Maven3.5'
        jdk 'JDK8'
    }
   
   

   
    stages {
        stage('Init') {
           steps {
           
              script {
                 envVars="B_SYSTEM_NAME"
              }
              
           
              notifyStarted("Job started", ${envVars})
              
              
                             echo 'Init'
           
           
                    script {
                       jobName="MavenTemplate"
                    }
              
              echo "jobName=${jobName}"
           }
        }        
        
        /* Comment this until Sonar is up and running */
/*        
        stage('Sonarqube analysis') {
           steps {
              echo 'Sonarqube analysis'
              script {
                 scannerHome = tool 'Sonar';
              }
              echo "scannerHome=${scannerHome}"
               
       
              withSonarQubeEnv('SonarServer') {
                 //sh "${scannerHome}/bin/sonar-scanner"
                  sh 'mvn -f MavenTemplate/ org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar'
              }
              
           }
        }*/
        
        
        stage('Build') {
            steps {
                notifyStarted("Build started")
                
                echo "888"
                echo 'Building..1'
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                // export JENKINS_MAVEN_AGENT_DISABLED=true
                sh 'mvn -f MavenTemplate/ -B install'
                
                notifyStarted("Build ended")
            }
        }
        
        stage('Test') {
            steps {
                notifyStarted("Tests started")
                
                echo 'Testing.......1'
                sh 'mvn -f MavenTemplate/ -Dmaven.test.failure.ignore=true -B test'
                
                notifyStarted("Tests Ended")
            }
        }
        
        /* If this is enabled, the build will wait for manual intervention before proceeding */
        
        /*
        stage('Checkup') {
            steps {
             input "Does the test look ok?"
            }
        }
        */
        
        /*
        stage('Deploy') {
            steps {
                def pom = readMavenPom file: 'pom.xml'
                echo 'Deploying....1'
                echo 'project.name=${project.name}'                
                def version = pom.version.replace("-SNAPSHOT", ".${currentBuild.number}")
                //echo 'pom.version='${pom.version}
                echo 'version='${version}    
                sh 'pwd'
                sh 'cp MavenTemplate/target/MavenTemplate-0.0.1-SNAPSHOT.jar /tmp/MavenTemplate.jar'
            }
        }
        */
        
        /*
        stage('DeployToArt') {
           steps {
             script {
                 def uploadSpec = """{
                 "files": [
                 {
                    "pattern": "MavenTemplate/MavenTemplate-0.0.1-SNAPSHOT.jar",
                    "target": "/libs-snapshot-local/"
                 }
                 ]
              }"""
              server.upload(uploadSpec)
              }
           }
        }
        */
    
        

            
            
            
            
    } // Stages
    
    
    
        post {
        
           always {
              echo "Post-always Updated from github"
           }
        
           success {
              echo "Post-success"
           }
        
           failure {
              echo "Post-failure"
           }
        
        }
        
        
    
} // Pipeline


    def notifyStarted(message, envVars) {
    
    
  // send to Slack
 // slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
 
  // send to HipChat
  //hipchatSend (color: 'YELLOW', notify: true,
  //    message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
  //  )
 
  // send to email
  

  
  emailext (
      
	 // envVars="B_SYSTEM_NAME=${B_SYSTEM_NAME}"

      subject: "$message : Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'", to: '231saleln@gmail.com',

      body: "$message : Job ${env.BUILD_URL} ${env.JOB_NAME} $envVars",

      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    )
}
